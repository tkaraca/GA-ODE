%% Compute the fitness function
function c = fitfun(x,bet,eta,k,son,t,dt,lan1,lan2)
x(1)=6;
%% t1 is start of vaccination period deltat is duration of vaccination 
% period and nu is percentage of vaccinated population. These values are
% generated by ga() randomly in an x vector i.e. x=[x(1) x(2) x(3)].
t1=x(1);deltat=x(2);nu=x(3);
% t2 end time of vaccination and t3 is the end time of disease.
t2=t1+deltat;t3=son;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Solve SIR until t1
% setting Initial values and time span (on which integration is required) 
% for ode45() solver.[S1i I1i R1i V1i] are the initial values for
% susceptibles, Infected, Removed(recovered) and vaccinated. Solve the 
% problem with no vaccination. 
tt1=(0:dt:t1);
R1i=0;I1i=1/10^k;S1i=1-I1i-R1i;V1i=0;
% Calling the sira() function, that includes the compartmental ordinary
% differential equation system representing SIRV model.
fun=@(t,y) sira(t,y,bet,eta,0);% with no vaccination so nu=0 
% Calling the ode45() function, that will solve the compartmental ordinary
% differential equation system representing SIRV model.
sol=ode45(fun,[0 t1],[S1i I1i R1i V1i]);
T=sol.x';U=sol.y'; % These are column vectors 
% Calling the deval() function, that will evaluate the solution sol of above 
% differential equation problem at the points contained in tt1.
UU1=deval(tt1,sol); UU1=UU1';
S1=UU1(:,1);I1=UU1(:,2);R1=UU1(:,3);V1=UU1(:,4);
% [S1f I1f R1f V1f] are the final values for susceptibles, Infected, 
% Removed(recovered) and vaccinated.
S1f=S1(end,1);I1f=I1(end,1);R1f=R1(end,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Solve SIR t1 until t2
% setting Initial values and time span (on which integration is required) 
% for ode45() solver.[S2i=S1f I2i=I1f R2i=R1f V2i=0] are the initial 
% values for susceptibles, Infected, Removed(recovered) and vaccinated. 
tt2=(t1:dt:t2);
%if S1f<eta/bet, nu=0; end
R2i=R1f;I2i=I1f;V2i=0;S2i=S1f;
% Calling the sira() function, that includes the compartmental ordinary
% differential equation system representing SIRV model.
fun=@(t,y) sira(t,y,bet,eta,nu);
sol=ode45(fun,[t1 t2],[S2i I2i R2i V2i]);
T=sol.x';U=sol.y'; % These are column vectors 
% Calling the deval() function, that will evaluate the solution sol of above 
% differential equation problem at the points contained in tt1.
UU2=deval(tt2,sol); UU2=UU2';
S2=UU2(:,1);I2=UU2(:,2);R2=UU2(:,3);V2=UU2(:,4);
% [S2f I2f R2f V2f] are the final values for susceptibles, Infected, 
% Removed(recovered) and vaccinated.
S2f=S2(end,1);I2f=I2(end,1);R2f=R2(end,1);V2f=V2(end,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Solve SIR t2 until t3
% setting Initial values and time span (on which integration is required) 
% for ode45() solver.[S3i=1-R3i-I3i-V3i I3i=I2f R3i=R2f V3i=V2f] are the initial 
% values for susceptibles, Infected, Removed(recovered) and vaccinated. 
tt3=(t2:dt:t3);
R3i=R2f;I3i=I2f;V3i=V2f;S3i=1-R3i-I3i-V3i;
% Calling the sira() function, that includes the compartmental ordinary
% differential equation system representing SIRV model.
fun=@(t,y) sira(t,y,bet,eta,0);
sol=ode45(fun,[t2 t3],[S3i I3i R3i V3i]);
T=sol.x';U=sol.y'; % These are column vectors 
% Calling the deval() function, that will evaluate the solution sol of above 
% differential equation problem at the points contained in tt1.
UU3=deval(tt3,sol); UU3=UU3';
S3=UU3(:,1);I3=UU3(:,2);R3=UU3(:,3);V3=UU3(:,4);
% [S3f I3f R3f V3f] are the final values for susceptibles, Infected, 
% Removed(recovered) and vaccinated.
S3f=S3(end,1);I3f=I3(end,1);R3f=R3(end,1);V3f=V3(end,1);
% cost calculation, here lan1 is normalized patient care cost and lan2=l-lan1 is
% vaccination normalized cost
c=lan1*(R3f)+lan2*(V3f);
%c=c+(1/(S1f-eta/2/bet));
end 